import gzip, sys, time, os 
import numpy as np
from numpy import savetxt
import pandas as pd
import matplotlib.pyplot as plt

# specific seqbreed modules
from SeqBreed import genome as gg
from SeqBreed.selection import selection as sel

# Set current dir, working dir, and input file dir
cdir = os.getcwd()
wdir = cdir+"/work"
ddir = cdir

# working files, seqfile contains snp positions from vcf
# this file is generated by gg.GFounder below
seqfile = 'seq.pos'

# list of chips that can be analyzed, include sequence as output from gg.GFounder()
chipfiles = [seqfile]

# contains qtn positions
qtnfile = ddir + '/potato.qtn.pos'
# snp file in gen format
genfile = ddir + '/potato.gen'
# goto working directory
os.chdir(wdir)

#---------------------------------------------------------------
# STEP 1: uploads genotypes and generates snp positions (snpFile)
# NOTE that ploidy level must be specified if gen format
#---------------------------------------------------------------
gbase = gg.GFounder(vcfFile=genfile, snpFile=seqfile, ploidy=4)

#---------------------------------------------------------------
# STEP 2: generates Genome object with chr names, recombination map, etc
#---------------------------------------------------------------
gfeatures = gg.Genome(snpFile=seqfile, ploidy=gbase.ploidy)

# prints some basic info
gfeatures.print()

#---------------------------------------------------------------
# STEP 3: read QTN file
#---------------------------------------------------------------
qtn = gg.QTNs(h2=[0.5, 0.7], genome=gfeatures, qtnFile=qtnfile)
qtn.get_var(gfeatures,gbase)
qtn.print(gfeatures)

# STEP 4: generate base population
pop = gg.Population(gfeatures, pedFile=None, generation=None, qtns=qtn, gfounders=gbase)

# STEP 5: Simulate a F2 between the 10 most extreme lowest and highest lines for second phenotype
#--> Sort phenotypes and sel parents
itrait = 1
nsel = 10
y = np.array(list(pop.inds[i].y[itrait] for i in range(pop.n))) # phenotypes


# STEP 5: GWAS
# generate chip objects
chipseq = gg.Chip(chipFile=seqfile, genome=gfeatures, name='seq_chip')

# generates genotype matrix X
X = gg.do_X(pop.inds, gfeatures, gbase, chip=chipseq)
savetxt ("genotype.csv", X, fmt="%d", delimiter=",") 
nMarkers = X.shape [0]
nSamples = X.shape [1]

markerNames = []
for i in range (1,nMarkers+1): 
  markerNames.append ("snp"+str(i).zfill (3))

sampleNames = []
for i in range (1,nSamples+1): 
  sampleNames.append ("sample"+str(i).zfill (3))

#matrix = np.reshape (X, (nMarkers, nSamples))
print ("Writing phenotype...")
dfY = pd.DataFrame (y, columns=["Trait"], index=sampleNames)
dfY.to_csv ("phenotype-simulated-SeqBreed-tetra.csv", index=True, header=True)

print ("Writing genotype...")
df = pd.DataFrame (X.astype(int), columns=sampleNames, index=markerNames)
df.to_csv ("genotype-simulated-SeqBreed-tetra.csv", index=True, header=True)

exit(0)

# GWAS with snps listed in first chip
gwas = sel.Gwas(X, chipseq)
gwas.fit(pop.inds, trait=1)
gwas.plot(fdr=True)    # FDR

gwas.print(gfeatures)  # prints gwas results

# GWAS with two - PCA corrected phenotypes
pca = sel.Pca(X)
pca.fit()
y = np.array(list(ind.y[itrait] for ind in pop.inds))
y = y - pca.p[:,0] - pca.p[:,1] # y corrected
gwas.fit(y=y, trait=itrait)
gwas.plot(fdr=True)    # FDR

# GWAS for first trait
gwas = sel.Gwas(X, chipseq)
gwas.fit(pop.inds, trait=0)
gwas.plot(fdr=True)    # FDR

